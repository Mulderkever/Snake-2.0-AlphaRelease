import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;
import javax.swing.border.LineBorder;
import java.io.*;
public class GamePanel extends JPanel implements ActionListener {

    static final int SCREEN_WIDTH = 600;
    static final int SCREEN_HEIGHT = 600;
    static final int UNIT_SEIZE = 25;

    static final int GAME_UNITS = (SCREEN_WIDTH*SCREEN_HEIGHT)/UNIT_SEIZE;
    static final int DELAY = 75;
    final int x[] = new int[GAME_UNITS];
    final int y[] = new int[GAME_UNITS];
    int bodyParts = 6;
    int applesEaten;
    int appleX;
    int appleY;
    char direction = 'R';
    boolean running = false;
    boolean grid = false;
    Timer timer;
    Random random;
    JButton retryButton;
    JButton settingsButton;
    private int highScore = 0;  // Variable to store high score

    private static final String HIGH_SCORE_FILE = "highscore.txt";

    // Method to save the high score to a file
    private void saveHighScore() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(HIGH_SCORE_FILE))) {
            writer.write(Integer.toString(highScore));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }





    GamePanel() {
        random = new Random();
        this.setPreferredSize(new Dimension(SCREEN_WIDTH,SCREEN_HEIGHT));
        this.setBackground(Color.BLACK);
        this.setFocusable(true);
        this.addKeyListener(new MyKeyAdapter());
        startGame();
        retryButton = new JButton("Retry");
        settingsButton = new JButton("Settings");
        retryButton.setFont(new Font("Trebuchet MS", Font.BOLD, 42));
        // Set background color
        retryButton.setBackground(Color.BLACK);
        retryButton.setBorder(new LineBorder(Color.RED, 2));
        settingsButton.setFont(new Font("Trebuchet MS", Font.BOLD, 42));
        settingsButton.setBackground(Color.BLACK);
        settingsButton.setBorder(new LineBorder(Color.RED, 2));
        settingsButton.setForeground(Color.red);


        retryButton.setForeground(Color.red);
        retryButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                restartGame();
            }
        });
        this.setLayout(null);
        retryButton.setBounds(SCREEN_WIDTH / 2-100, SCREEN_HEIGHT / 2 +150, 200, 60);

        retryButton.setVisible(false);


        this.add(settingsButton);
        settingsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openSettingsFrame();

            }
        });
        this.setLayout(null);
        settingsButton.setBounds(SCREEN_WIDTH / 2-100, SCREEN_HEIGHT / 2 -50, 200, 60);

        settingsButton.setVisible(false);
        this.add(settingsButton);

        this.add(retryButton);
        settingsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openSettingsFrame();

            }
        });
        this.setLayout(null);
        retryButton.setBounds(SCREEN_WIDTH / 2-100, SCREEN_HEIGHT / 2 +150, 200, 60);

        retryButton.setVisible(false);
        this.add(retryButton);
    }


    public void startGame(){

        newApple();
        loadHighScore();
        running = true;
        timer = new Timer(DELAY,this);
        timer.start();

    }
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        draw(g);

    }
    public void draw(Graphics g){

        if (running) {
            if (grid){
            for (int i = 0; i < SCREEN_HEIGHT / UNIT_SEIZE; i++) {
                g.drawLine(i * UNIT_SEIZE, 0, i * UNIT_SEIZE, SCREEN_HEIGHT);
                g.drawLine(0, i * UNIT_SEIZE, SCREEN_WIDTH, i * UNIT_SEIZE);

            }




            }
            g.setColor(new Color(51, 0, 0));
            g.setFont(new Font("Trebuchet MS",Font.BOLD, 42));
            FontMetrics metrics = getFontMetrics(g.getFont());
            g.drawString("Score: "+applesEaten,(SCREEN_WIDTH - metrics.stringWidth("Score: "+applesEaten))/2,g.getFont().getSize());

            g.setColor(Color.red);
            g.fillOval(appleX, appleY, UNIT_SEIZE, UNIT_SEIZE);

            for (int i = 0; i < bodyParts; i++) {
                if (i == 0) {
                    g.setColor(Color.green);
                    g.fillRect(x[i], y[i], UNIT_SEIZE, UNIT_SEIZE);
                } else if (i % 2 == 0) {
                    g.setColor(new Color(0, 77, 0));
                    g.fillRect(x[i], y[i], UNIT_SEIZE, UNIT_SEIZE);

                } else {
                    g.setColor(new Color(0, 51, 0));
                    g.fillRect(x[i], y[i], UNIT_SEIZE, UNIT_SEIZE);
                }
            }

        }

        else {
            gameOver(g);

        }



    }
    public void newApple(){
        appleX = random.nextInt((int)(SCREEN_WIDTH/UNIT_SEIZE))*UNIT_SEIZE;
        appleY = random.nextInt((int)(SCREEN_HEIGHT/UNIT_SEIZE))*UNIT_SEIZE;

    }
    public void move(){
        for(int i = bodyParts;i>0;i--){
            x[i] = x[i-1];
            y[i] = y[i-1];
        }
        switch (direction){
            case 'U':
                y[0] = y[0] - UNIT_SEIZE;
                break;
            case 'D':
                y[0] = y[0] + UNIT_SEIZE;
                break;
            case 'L':
                x[0] = x[0] - UNIT_SEIZE;
                break;
            case 'R':
                x[0] = x[0] + UNIT_SEIZE;
                break;
        }

    }
    private void openSettingsFrame() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                SettingsFrame settingsFrame = new SettingsFrame();
            }
        });
    }
    private void checkHighScore() {
        if (applesEaten > highScore) {
            highScore = applesEaten;
            saveHighScore();
        }
    }
    private void loadHighScore() {
        try (BufferedReader reader = new BufferedReader(new FileReader(HIGH_SCORE_FILE))) {
            String line = reader.readLine();
            if (line != null) {
                highScore = Integer.parseInt(line);
            }
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
    }

    public void checkApple(){
        if((x[0]==appleX)&& (y[0]== appleY)){
            bodyParts++;
            applesEaten++;
            newApple();
            checkHighScore();
        }

    }
    public void checkCollisions(){
        //body collisions
        for(int i = bodyParts;i>0;i--){
            if((x[0]== x[i])&&(y[0]==y[i])){
                running = false;
            }

        }
        //border collisions

        //left border
        if(x[0]<0){
            running = false;
        }
        //right border
        if(x[0]>SCREEN_WIDTH-UNIT_SEIZE){
            running = false;
        }
        //upper border
        if(y[0]<0){
            running = false;
        }
        //down border
        if(y[0]>SCREEN_HEIGHT-UNIT_SEIZE){
            running = false;
        }
        //timer stopping
        if(!running){
            timer.stop();
        }

    }
    public void gameOver(Graphics g){
        g.setColor(Color.red);
        g.setFont(new Font("Trebuchet MS",Font.BOLD, 75));
        FontMetrics metrics1 = getFontMetrics(g.getFont());
        g.drawString("Game over",(SCREEN_WIDTH - metrics1.stringWidth("Game Over"))/2,SCREEN_HEIGHT/2);
        g.setColor(Color.red);
        g.setFont(new Font("Trebuchet MS",Font.BOLD, 42));
        FontMetrics metrics2 = getFontMetrics(g.getFont());
        g.drawString("Final Score: "+applesEaten,(SCREEN_WIDTH - metrics2.stringWidth("Final Score: "+applesEaten))/2,g.getFont().getSize());
        retryButton.setVisible(true);
        g.drawString("High Score: "+highScore,(SCREEN_WIDTH - metrics2.stringWidth("High Score: "+applesEaten))/2,SCREEN_HEIGHT/2+70);
        settingsButton.setVisible(true);


    }

    public void restartGame() {
        timer.stop();
        for (int i = 0; i < bodyParts; i++) {
            x[i] = 0;
            y[i] = 0;
        }
        // Reset game variables
        bodyParts = 6;
        applesEaten = 0;
        direction = 'R';
        running = true;

        // Restart the timer



        // Hide the retry button
        retryButton.setVisible(false);
        settingsButton.setVisible(false);

        // Start a new game
        startGame();
    }



    @Override
    public void actionPerformed(ActionEvent e) {
        if(running){
            move();
            checkApple();
            checkCollisions();

        }
        repaint();

    }
    public class MyKeyAdapter extends KeyAdapter{
        @Override
        public void keyPressed(KeyEvent e){
            switch (e.getKeyCode()){
                case KeyEvent.VK_LEFT:
                    if(direction!='R'){
                        direction = 'L';
                    }
                    break;
                case KeyEvent.VK_RIGHT:
                    if(direction!='L'){
                        direction = 'R';
                    }
                    break;
                case KeyEvent.VK_UP:
                    if(direction!='D'){
                        direction = 'U';
                    }
                    break;
                case KeyEvent.VK_DOWN:
                    if(direction!='U'){
                        direction = 'D';
                    }
                    break;
                    //toggle grid
                case KeyEvent.VK_G:
                    grid= !grid;
                    break;
            }

        }

    }
}



for (int i = 0; i < bodyParts; i++) {
                if (i == 0) {
                    g.setColor(Color.GREEN);
                    g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
                } else if (i % 2 == 0) {
                    g.setColor(new Color(0, 77, 0));
                    g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
                } else {
                    g.setColor(new Color(0, 51, 0));
                    g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
                }
            }

